{"ast":null,"code":"var _jsxFileName = \"/home/santhosh/Desktop/auth-service/auth-service-client/src/Container/MobileAuth/sendOtp.js\";\nimport React from \"react\";\nimport SendOtpView from \"../../Components/Mobile/sendOtpView\";\nimport * as Actions from \"../../Actions\";\nimport { connect } from \"react-redux\";\nimport VerifyOtp from \"../../Components/Mobile/verifyOtp\";\n\nclass SendOtp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleVerifyOnSubmit = (values, actions) => {\n      const otp = values.otp;\n      const contact = this.state.contact;\n      const dispatch = this.props.dispatch;\n      dispatch(Actions.verifyOtp({\n        contact,\n        otp\n      }));\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        respSuccess: false\n      });\n    };\n\n    this.state = {\n      otp: \"\",\n      contact: \"\",\n      respMessage: '',\n      respSuccess: false,\n      onClick: false,\n      verify: false\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    console.log(\"nextProps inside >>, \", nextProps);\n\n    if (nextProps.sentOtp && nextProps.sentOtp.error && nextProps.sentOtp.error.data && !nextProps.sentOtp.error.data.success) {\n      this.setState({\n        respMessage: nextProps.sentOtp.error.data.message ? nextProps.sentOtp.error.data.message : nextProps.sentOtp.error.data.error.message,\n        respSuccess: true\n      });\n    } else {\n      if (nextProps.sentOtp && nextProps.sentOtp.data.data && nextProps.sentOtp.data.data.success) {\n        this.setState({\n          respMessage: nextProps.sentOtp.data.data.message,\n          respSuccess: true,\n          verify: true,\n          contact: nextProps.sentOtp.data.data.contact\n        });\n      } else {\n        this.setState({\n          respMessage: nextProps.sentOtp.data.message,\n          respSuccess: true\n        });\n      }\n    }\n  }\n\n  handleSubmit(values, actions) {\n    const contact = values.contact;\n    const dispatch = this.props.dispatch;\n    dispatch(Actions.sendOtp({\n      contact\n    }));\n  }\n\n  render() {\n    const _this$state = this.state,\n          contact = _this$state.contact,\n          respSuccess = _this$state.respSuccess,\n          respMessage = _this$state.respMessage,\n          successMessage = _this$state.successMessage,\n          verify = _this$state.verify,\n          otp = _this$state.otp;\n    let initialValues = {};\n    verify ? initialValues = {\n      otp\n    } : initialValues = {\n      contact\n    };\n    const handleSubmit = this.handleSubmit,\n          handleClose = this.handleClose,\n          handleVerifyOnSubmit = this.handleVerifyOnSubmit;\n    return verify ? React.createElement(VerifyOtp, {\n      contact: contact,\n      initialValues: initialValues,\n      handleVerifyOnSubmit: handleVerifyOnSubmit,\n      respMessage: respMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }) : React.createElement(SendOtpView, {\n      initialValues: initialValues,\n      handleSubmit: handleSubmit,\n      handleClose: handleClose,\n      respSuccess: respSuccess,\n      respMessage: respMessage,\n      successMessage: successMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst mapState = state => {\n  return {\n    sentOtp: state.sendOtpResp,\n    verifyOtp: state.verifyOtp\n  };\n};\n\nexport default connect(mapState)(SendOtp);","map":{"version":3,"sources":["/home/santhosh/Desktop/auth-service/auth-service-client/src/Container/MobileAuth/sendOtp.js"],"names":["React","SendOtpView","Actions","connect","VerifyOtp","SendOtp","Component","constructor","props","handleVerifyOnSubmit","values","actions","otp","contact","state","dispatch","verifyOtp","handleClose","setState","respSuccess","respMessage","onClick","verify","handleSubmit","bind","componentWillReceiveProps","nextProps","console","log","sentOtp","error","data","success","message","sendOtp","render","successMessage","initialValues","mapState","sendOtpResp"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport SendOtpView from \"../../Components/Mobile/sendOtpView\"\nimport * as Actions from \"../../Actions\";\nimport { connect } from \"react-redux\";\nimport VerifyOtp from \"../../Components/Mobile/verifyOtp\";\n\nclass SendOtp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      otp : \"\",\n      contact: \"\",\n      respMessage: '',\n      respSuccess: false,\n      onClick: false,\n      verify : false\n\n    }\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  componentWillReceiveProps(nextProps) {\n    console.log(\"nextProps inside >>, \", nextProps)\n    if (\n      nextProps.sentOtp &&\n      nextProps.sentOtp.error &&\n      nextProps.sentOtp.error.data &&\n      !nextProps.sentOtp.error.data.success\n    ) {\n      this.setState({\n        respMessage: nextProps.sentOtp.error.data.message\n          ? nextProps.sentOtp.error.data.message\n          : nextProps.sentOtp.error.data.error.message,\n        respSuccess: true\n      })\n    } else {\n      if (\n       ( nextProps.sentOtp &&\n        nextProps.sentOtp.data.data &&\n        nextProps.sentOtp.data.data.success)\n      ) {\n        this.setState({\n          respMessage: nextProps.sentOtp.data.data.message,\n          respSuccess: true,\n          verify : true,\n          contact : nextProps.sentOtp.data.data.contact\n        })\n\n      } else {\n        this.setState({\n          respMessage: nextProps.sentOtp.data.message,\n          respSuccess: true\n        })\n      }\n    }\n  }\n\n  handleSubmit(values, actions) {\n    const { contact } = values\n    const { dispatch } = this.props\n    dispatch(Actions.sendOtp({ contact }))\n  }\n\n  handleVerifyOnSubmit = (values, actions) => {\n    const { otp } = values\n    const { contact } = this.state;\n    const { dispatch } = this.props\n    dispatch(Actions.verifyOtp({ contact, otp }))\n  }\n\n  handleClose = () => {\n    this.setState({\n      respSuccess: false\n    })\n  }\n\n  render() {\n    const { contact\n      , respSuccess, respMessage, successMessage, verify, otp } = this.state;\n    let initialValues = {}\n    verify ? initialValues = { otp } : initialValues = { contact }\n    const { handleSubmit, handleClose, handleVerifyOnSubmit } = this\n    return (\n      verify ?\n      <VerifyOtp \n        contact              = { contact }\n        initialValues        = { initialValues }\n        handleVerifyOnSubmit = { handleVerifyOnSubmit }\n        respMessage          = { respMessage }\n      /> :\n      <SendOtpView\n        initialValues  = {initialValues}\n        handleSubmit   = {handleSubmit}\n        handleClose    = {handleClose}\n        respSuccess    = {respSuccess}\n        respMessage    = {respMessage}\n        successMessage = {successMessage}\n      /> \n    )\n  }\n}\n\n\nconst mapState = (state) => {\n  return {\n    sentOtp: state.sendOtpResp,\n    verifyOtp : state.verifyOtp\n  }\n}\n\nexport default connect(mapState)(SendOtp)"]},"metadata":{},"sourceType":"module"}