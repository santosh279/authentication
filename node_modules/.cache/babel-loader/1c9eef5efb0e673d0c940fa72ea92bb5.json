{"ast":null,"code":"var _jsxFileName = \"/home/santhosh/Desktop/auth-service/auth-service-client/src/Container/login/login.js\";\nimport React from \"react\";\nimport * as Actions from \"../../Actions\";\nimport LoginView from \"../../Components/LoginView/loginView\";\nimport { connect } from \"react-redux\";\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClose = () => {\n      this.setState({\n        respSuccess: false\n      });\n    };\n\n    this.state = {\n      email: '',\n      password: '',\n      respMessage: '',\n      respSuccess: false,\n      onClick: false\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(values, actions) {\n    const email = values.email,\n          password = values.password;\n    const dispatch = this.props.dispatch;\n\n    if (email && password) {\n      dispatch(Actions.login({\n        email,\n        password\n      }));\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.response && nextProps.response.error && nextProps.response.error.data && !nextProps.response.error.data.success) {\n      this.setState({\n        respMessage: nextProps.response.error.data.message ? nextProps.response.error.data.message : nextProps.response.error.data.error.message,\n        respSuccess: true\n      });\n    } else {\n      if (nextProps.response && nextProps.response.data.data && nextProps.response.data.data.success) {\n        this.setState({\n          respMessage: nextProps.response.data.data.message,\n          respSuccess: true\n        });\n        let access_token = JSON.stringify(nextProps.response.data.data.accessToken);\n        localStorage.setItem('access_token', access_token);\n        window.location.href = '/welcome-page';\n      } else {\n        this.setState({\n          respMessage: nextProps.response.data.message,\n          respSuccess: true\n        });\n      }\n    }\n  }\n\n  render() {\n    const _this$state = this.state,\n          email = _this$state.email,\n          password = _this$state.password,\n          respSuccess = _this$state.respSuccess,\n          respMessage = _this$state.respMessage;\n    const handleSubmit = this.handleSubmit,\n          handleClose = this.handleClose;\n    let initialValues = {\n      email,\n      password\n    };\n    return React.createElement(LoginView, {\n      initialValues: initialValues,\n      handleSubmit: handleSubmit,\n      handleClose: handleClose,\n      respSuccess: respSuccess,\n      respMessage: respMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    response: state.loginResp\n  };\n};\n\nexport default connect(mapStateToProps)(Login);","map":{"version":3,"sources":["/home/santhosh/Desktop/auth-service/auth-service-client/src/Container/login/login.js"],"names":["React","Actions","LoginView","connect","Login","Component","constructor","props","handleClose","setState","respSuccess","state","email","password","respMessage","onClick","handleSubmit","bind","values","actions","dispatch","login","componentWillReceiveProps","nextProps","response","error","data","success","message","access_token","JSON","stringify","accessToken","localStorage","setItem","window","location","href","render","initialValues","mapStateToProps","loginResp"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport * as Actions from \"../../Actions\"\nimport LoginView from \"../../Components/LoginView/loginView\";\nimport { connect } from \"react-redux\"\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      respMessage: '',\n      respSuccess: false,\n      onClick: false,\n    }\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(values, actions) {\n    const { email, password } = values\n    const { dispatch } = this.props\n    if (email && password) {\n      dispatch(Actions.login({ email, password }))\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (\n      nextProps.response &&\n      nextProps.response.error &&\n      nextProps.response.error.data &&\n      !nextProps.response.error.data.success\n    ) {\n      this.setState({\n        respMessage: nextProps.response.error.data.message\n          ? nextProps.response.error.data.message\n          : nextProps.response.error.data.error.message,\n        respSuccess: true\n      })\n    } else {\n      if (\n        nextProps.response &&\n        nextProps.response.data.data &&\n        nextProps.response.data.data.success\n      ) {\n        this.setState({\n          respMessage: nextProps.response.data.data.message,\n          respSuccess: true\n        })\n        let access_token = JSON.stringify(\n          nextProps.response.data.data.accessToken\n        )\n        localStorage.setItem('access_token', access_token)\n        window.location.href = '/welcome-page'\n      } else {\n        this.setState({\n          respMessage: nextProps.response.data.message,\n          respSuccess: true\n        })\n      }\n    }\n  }\n\n  handleClose = () => {\n    this.setState({\n      respSuccess: false\n    })\n  }\n\n  render() {\n    const { email, password, respSuccess, respMessage } = this.state;\n    const { handleSubmit, handleClose } = this;\n    let initialValues = {\n      email, password\n    }\n    return (\n      <LoginView\n        initialValues = {initialValues}\n        handleSubmit  = {handleSubmit}\n        handleClose   = {handleClose}\n        respSuccess   = {respSuccess}\n        respMessage   = {respMessage}\n      />\n    )\n  }\n}\n\n\nconst mapStateToProps = (state) => {\n  return {\n    response: state.loginResp\n  }\n}\n\nexport default connect(mapStateToProps)(Login);"]},"metadata":{},"sourceType":"module"}